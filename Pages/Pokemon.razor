@page "/pokemon"
@using MudBlazor
@using koloro.Core.Models
@using koloro.Core.RestClients
@using Excubo.Blazor.Canvas
@using System.Globalization;
@inject HttpClient Http
@inject IJSRuntime js
@inject ILanguageContainerService i18n


<Canvas id="helper_canvas" @ref="helper_canvas" width="@width" height="@(height+25)" hidden />
<img id="img_helper" src="@b64_helper" hidden />

<MudAppBar Style="@($"color:{Colors.Shades.White};background:{Colors.BlueGrey.Lighten5};")" Class="menu_top">
    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="3">
                <MudTextField @bind-Value="nametofind" Label="@i18n.Keys["Name"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Mode" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="offset" Label="@i18n.Keys["Offset"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FirstPage" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="limit" Label="@i18n.Keys["Limit"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ContentCopy" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="enumValue"
                           OffsetY="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Style" AdornmentColor="Color.Dark">
                    @foreach (StyleArt item in Enum.GetValues(typeof(StyleArt)))
                    {
                        <MudSelectItem Value="@item"><div class="miniFont">@item</div></MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudSpacer></MudSpacer>
    <MudIconButton Icon="fas fa-paper-plane" Color="Color.Dark" OnClick="@(()=>SendForm())"></MudIconButton>

</MudAppBar>
<div class="grid">
    @if (!IsLoading)
    {
        <ul class="elements">

            @foreach (var pokemon in ListPokemonData)
            {

                <li>
                    <img class="pok" style="width:100%; max-width: 450px" src=@SelectUrl(pokemon) @onclick="() => { PlayAudio(pokemon).GetAwaiter(); }" />
                    <div class="container">
                
                        <div class="name">@CultureInfo.CurrentCulture.TextInfo.ToTitleCase(pokemon.name)</div>
                        <div class="ico">
                            <i class="number">@pokemon.id</i>
                            @foreach(var type in pokemon.types)
                            {
                                <img style="width:10%; padding: 0 0 0 1px;" src=@ImageByType(type.name)>
                            }

                            <i class="fa-solid fa-circle-question" style="float: right; padding:4% 0 0 4%;" @onclick="() => { PokemonInfoToNewTab(pokemon.name).GetAwaiter() ;}"></i>
                            <i class="fa-solid fa-circle-down" style="float: right; padding: 4% 0 0 4%;" @onclick="() => { DownloadImage(pokemon, false).GetAwaiter(); }"></i>
                            <i class="fa-solid fa-circle-half-stroke" style="float: right; padding: 4% 0 0 4%;" @onclick="() => { DownloadImage(pokemon, true).GetAwaiter(); }"></i>

                            </div>

                    </div>
                </li>

            }

        </ul>
    }
    else
    {
        <MudProgressLinear Style="height: 20px; margin-top: -10px;" Color="Color.Success" Indeterminate="true" />
    }
</div>


@code{

    private bool IsLoading = true;
    private List<PokemonDto> ListPokemonData;
    private List<PokemonDto> AllPokemonData;
    private Canvas helper_canvas;
    private int offset = 0;
    private int limit = 30;
    private int size = 250;
    private double width = 0;
    private double height = 0;
    private string nametofind = string.Empty;
    private MudForm form;
    private bool success;
    private string b64_helper = string.Empty;

    public double saturate = 0;
    public double grayscale = 100;
    public double brightness = 200;
    public double contrast = 1000;

    public enum StyleArt { Official, DreamWorld }
    private StyleArt enumValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        i18n.InitLocalizedComponent(this);
        await LoadPokemon();
        IsLoading = false;

    }

    private async Task SendForm()
    {
        await LoadPokemon();
        IsLoading = false;
    }

    private async Task LoadPokemon()
    {

        if (AllPokemonData == null || !AllPokemonData.Any())
            AllPokemonData = await Http.GetFromJsonAsync<List<PokemonDto>>("data/pokemon.json");

        if (!string.IsNullOrEmpty(nametofind))
            ListPokemonData = AllPokemonData.Where(x => (x.name.Contains(nametofind, StringComparison.InvariantCultureIgnoreCase) || x.id.ToString().Contains(nametofind, StringComparison.InvariantCultureIgnoreCase)) && x.art.official != null).Take(limit).ToList();
        else
            ListPokemonData = AllPokemonData.Where(x => x.art.official != null).Skip(offset).Take(limit).ToList();

        IsLoading = true;

    }

    private async Task DownloadImage(PokemonDto pokemon, bool blackwhite)
    {
        var url = SelectUrl(pokemon);
        b64_helper = await PokeApiRestClient.UrlToBase64(Http, url);
        var dimensions = (await js.InvokeAsync<string>("sizeImg", b64_helper)).Split("#");
        width = double.Parse(dimensions[0]);
        height = double.Parse(dimensions[1]);

        StateHasChanged();

        await using (var ctx = await helper_canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, double.MaxValue, double.MaxValue);
            if (blackwhite)
                await ctx.FilterAsync($"saturate({saturate}%) grayscale({grayscale}%) brightness({brightness}%) contrast({contrast}%)");
            else
                await ctx.FilterAsync("none");
            await ctx.DrawImageAsync("img_helper", 0, 0, width, height);
            await ctx.FontAsync("16px Helvetica");
            await ctx.FillTextAsync(pokemon.id + " # " + CultureInfo.CurrentCulture.TextInfo.ToTitleCase(pokemon.name), 0, height + 25);
        }

        StateHasChanged();

        await js.InvokeAsync<object>("saveAsFile", $"{pokemon.id}_{pokemon.name}.png");
    }

    private string SelectUrl(PokemonDto pokemon)
    {
        return pokemon.art.dreamworld != null && enumValue.Equals(StyleArt.DreamWorld) ? pokemon.art.dreamworld : pokemon.art.official;
    }

    private async Task PlayAudio(PokemonDto pokemon)
    {
        var url = $"https://api.triplydb.com/datasets/academy/pokemon/assets/download?fileName={pokemon.name}.ogg";
        await js.InvokeVoidAsync("playSound", url);
    }

    private string ImageByType(string type)
    {
        if (type.Equals("normal"))
            return "https://archives.bulbagarden.net/media/upload/thumb/9/95/Normal_icon_SwSh.png/64px-Normal_icon_SwSh.png";
        else if (type.Equals("fighting"))
            return "https://archives.bulbagarden.net/media/upload/thumb/3/3b/Fighting_icon_SwSh.png/64px-Fighting_icon_SwSh.png";
        else if (type.Equals("flying"))
            return "https://archives.bulbagarden.net/media/upload/thumb/b/b5/Flying_icon_SwSh.png/64px-Flying_icon_SwSh.png";
        else if (type.Equals("poison"))
            return "https://archives.bulbagarden.net/media/upload/thumb/8/8d/Poison_icon_SwSh.png/64px-Poison_icon_SwSh.png";
        else if (type.Equals("ground"))
            return "https://archives.bulbagarden.net/media/upload/thumb/2/27/Ground_icon_SwSh.png/64px-Ground_icon_SwSh.png";
        else if (type.Equals("rock"))
            return "https://archives.bulbagarden.net/media/upload/thumb/1/11/Rock_icon_SwSh.png/64px-Rock_icon_SwSh.png";
        else if (type.Equals("bug"))
            return "https://archives.bulbagarden.net/media/upload/thumb/9/9c/Bug_icon_SwSh.png/64px-Bug_icon_SwSh.png";
        else if (type.Equals("ghost"))
            return "https://archives.bulbagarden.net/media/upload/thumb/0/01/Ghost_icon_SwSh.png/64px-Ghost_icon_SwSh.png";
        else if (type.Equals("steel"))
            return "https://archives.bulbagarden.net/media/upload/thumb/0/09/Steel_icon_SwSh.png/64px-Steel_icon_SwSh.png";
        else if (type.Equals("fire"))
            return "https://archives.bulbagarden.net/media/upload/thumb/a/ab/Fire_icon_SwSh.png/64px-Fire_icon_SwSh.png";
        else if (type.Equals("water"))
            return "https://archives.bulbagarden.net/media/upload/thumb/8/80/Water_icon_SwSh.png/64px-Water_icon_SwSh.png";
        else if (type.Equals("grass"))
            return "https://archives.bulbagarden.net/media/upload/thumb/a/a8/Grass_icon_SwSh.png/64px-Grass_icon_SwSh.png";
        else if (type.Equals("electric"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/7b/Electric_icon_SwSh.png/64px-Electric_icon_SwSh.png";
        else if (type.Equals("psychic"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/73/Psychic_icon_SwSh.png/64px-Psychic_icon_SwSh.png"; 
        else if (type.Equals("ice"))
            return "https://archives.bulbagarden.net/media/upload/thumb/1/15/Ice_icon_SwSh.png/64px-Ice_icon_SwSh.png";
        else if (type.Equals("dragon"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/70/Dragon_icon_SwSh.png/64px-Dragon_icon_SwSh.png";
        else if (type.Equals("dark"))
            return "https://archives.bulbagarden.net/media/upload/thumb/d/d5/Dark_icon_SwSh.png/64px-Dark_icon_SwSh.png";
        else if (type.Equals("fairy"))
            return "https://archives.bulbagarden.net/media/upload/thumb/c/c6/Fairy_icon_SwSh.png/64px-Fairy_icon_SwSh.png";
        else
            return "";
    }

    public async Task PokemonInfoToNewTab(string pokemonName)
    {
        await js.InvokeAsync<object>("open", $"https://www.pokemon.com/es/pokedex/{pokemonName}", "_blank");
    }

}