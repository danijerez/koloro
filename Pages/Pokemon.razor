@page "/pokemon"
@using MudBlazor
@using koloro.Core.Models
@using koloro.Core.RestClients
@using Excubo.Blazor.Canvas
@inject HttpClient Http
@inject IJSRuntime js

<Canvas id="helper_canvas" @ref="helper_canvas" width="475" height="500" hidden />
<img id="img_helper" src="@b64_helper" hidden />
<MudAppBar Color="Color.Tertiary" Class="menu_top">
    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="3">
                <MudTextField @bind-Value="nametofind" Label="id/name" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Mode" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="offset" Label="offset" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.FirstPage" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="limit" Label="limit" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.ContentCopy" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="enumValue"
                           OffsetY="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Style" AdornmentColor="Color.Dark">
                    @foreach (StyleArt item in Enum.GetValues(typeof(StyleArt)))
                    {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudForm>


    <MudSpacer></MudSpacer>
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Error" OnClick="@(()=>ResetForm())"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Dark" OnClick="@(()=>SendForm())"></MudIconButton>

</MudAppBar>
<div class="grid">
    @if (!IsLoading)
    {
        <MudGrid Justify="Justify.Center">

            @foreach (var pokemon in ListPokemonData)
            {
                <MudItem>
                    <MudCard Style="@($"color:{Colors.Grey.Darken4};background:{Colors.Grey.Lighten3};")">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@pokemon.id - @pokemon.name</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" Target="_blank" Link=@("https://www.pokemon.com/es/pokedex/" + pokemon.name)  />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <img id="@pokemon.name" class="size_pokemon" width="@size/2" height="@size/2" src=@SelectUrl(pokemon) />
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.FormatColorReset" OnClick="() => { DownloadImage(pokemon, true); }" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="() => { DownloadImage(pokemon, false); }" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        </MudGrid>
    }
    else
    {
        <MudProgressLinear Style="height: 20px; margin-top: -10px;" Color="Color.Success" Value="@progress" Min="0" Max="100" />
    }
</div>

@code{

    private bool IsLoading = true;
    private List<PokemonData> ListPokemonData;
    private PokemonResponse ListNames;
    private double progress = 0;
    private Canvas helper_canvas;
    private int offset = 0;
    private int limit = 14;
    private int size = 250;
    private string nametofind = string.Empty;
    private MudForm form;
    private bool success;
    private string b64_helper = string.Empty;

    public double saturate = 0;
    public double grayscale = 100;
    public double brightness = 200;
    public double contrast = 1000;

    public enum StyleArt { Official, DreamWorld }
    private StyleArt enumValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPokemon();
        IsLoading = false;
    }

    private async Task SendForm()
    {
        await LoadPokemon();
        IsLoading = false;
    }

    private async Task ResetForm()
    {
        nametofind = string.Empty;
        offset = 0;
        limit = 12;
        size = 250;
    }

    private async Task LoadPokemon()
    {
        progress = 0;
        IsLoading = true;
        ListPokemonData = new List<PokemonData>();

        if (!string.IsNullOrEmpty(nametofind))
        {
            ListPokemonData.Add(await PokeApiRestClient.PokemonDataByName(Http, nametofind));
        }
        else
        {
            var PokemonPag = await PokeApiRestClient.Pokemon(Http, offset, limit);

            foreach (var pokemon in PokemonPag.results)
            {
                ListPokemonData.Add(await PokeApiRestClient.PokemonDataByName(Http, pokemon.name));
                progress = ListPokemonData.Count * 100 / limit;
                StateHasChanged();
            }
        }

    }

    private async Task DownloadImage(PokemonData pokemon, bool blackwhite)
    {
        var url = SelectUrl(pokemon);
        b64_helper = await PokeApiRestClient.UrlToBase64(Http, url);
        StateHasChanged();

        await using (var ctx = await helper_canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, 475, 500);
            await ctx.FontAsync("25px Helvetica");
            await ctx.FillTextAsync(pokemon.id + " - " + pokemon.name, 0, 475);
            if(blackwhite)
                await ctx.FilterAsync($"saturate({saturate}%) grayscale({grayscale}%) brightness({brightness}%) contrast({contrast}%)");
            await ctx.DrawImageAsync("img_helper", 0, 0, 475, 475);
        }

        StateHasChanged();

        await js.InvokeAsync<object>("saveAsFile", $"{pokemon.name}.png");
    }

    private string SelectUrl(PokemonData pokemon)
    {
        return pokemon.sprites.other.dream_world.front_default != null && enumValue.Equals(StyleArt.DreamWorld) ? pokemon.sprites.other.dream_world.front_default : pokemon.sprites.other.OfficialArtwork.front_default;
    }
}