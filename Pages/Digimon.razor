@page "/digimon"
@using MudBlazor
@using koloro.Core.Models
@using koloro.Core.RestClients
@using Excubo.Blazor.Canvas
@inject HttpClient Http
@inject IJSRuntime js
@inject ILanguageContainerService i18n

<Canvas id="helper_canvas" @ref="helper_canvas" width="@width" height="@(height+25)" hidden />
<img id="img_helper" src="@b64_helper" hidden />
<MudAppBar Style="@($"color:{Colors.Shades.White};background:{Colors.BlueGrey.Lighten5};")" Class="menu_top">
    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="3">
                <MudTextField @bind-Value="nametofind" Label="@i18n.Keys["Name"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Mode" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="offset" Label="@i18n.Keys["Offset"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.FirstPage" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="limit" Label="@i18n.Keys["Limit"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.ContentCopy" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudSpacer></MudSpacer>
    <MudIconButton Icon="fas fa-paper-plane" Color="Color.Dark" OnClick="@(()=>SendForm())"></MudIconButton>

</MudAppBar>
<div class="grid">
    @if (!IsLoading)
    {
        <MudGrid Justify="Justify.Center">

            @foreach (var digimon in ListDigimonData)
            {
                <MudItem>
                    <MudCard Style="@($"color:{Colors.Grey.Darken4};background:{Colors.Grey.Lighten4};")">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="cardFont">@digimon.name</div>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Link" Color="Color.Default" Target="_blank" Link=@("https://digimon.fandom.com/es/wiki/" + digimon.name) />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <img id="@digimon.name" class="cardSize" src=@SelectUrl(digimon) />
                        <MudCardActions>
                            <MudIconButton Icon="fas fa-tint-slash" OnClick="() => { DownloadImage(digimon, true).GetAwaiter(); }" Color="Color.Dark" />
                            <MudIconButton Icon="fas fa-save" OnClick="() => { DownloadImage(digimon, false).GetAwaiter(); }" Color="Color.Error" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        </MudGrid>
    }
    else
    {
        <MudProgressLinear Style="height: 20px; margin-top: -10px;" Color="Color.Success" Indeterminate="true" />
    }
</div>

@code{

    private bool IsLoading = true;
    private List<DigimonData> ListDigimonData;
    private List<DigimonData> AllDigimonData;
    private Canvas helper_canvas;
    private int offset = 0;
    private int limit = 14;
    private double width = 0;
    private double height = 0;
    private string nametofind = string.Empty;
    private MudForm form;
    private bool success;
    private string b64_helper = string.Empty;

    public double saturate = 0;
    public double grayscale = 100;
    public double brightness = 200;
    public double contrast = 1000;

    public enum StyleArt { Official, DreamWorld }
    private StyleArt enumValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        i18n.InitLocalizedComponent(this);
        await LoadDigimon();
        IsLoading = false;
    }

    private async Task SendForm()
    {
        await LoadDigimon();
        IsLoading = false;
    }

    private async Task LoadDigimon()
    {
        if (AllDigimonData == null || !AllDigimonData.Any())
            AllDigimonData = (await Http.GetFromJsonAsync<List<DigimonData>>("data/digimon.json"));

        if (!string.IsNullOrEmpty(nametofind))
            ListDigimonData = AllDigimonData.Where(x => x.name.Contains(nametofind, StringComparison.InvariantCultureIgnoreCase)).ToList();
        else
            ListDigimonData = AllDigimonData.Skip(offset).Take(limit).ToList();
    }

    private async Task DownloadImage(DigimonData digimon, bool blackwhite)
    {
        var url = "https://cors.bridged.cc/" + SelectUrl(digimon);
        b64_helper = await PokeApiRestClient.UrlToBase64(Http, url);
        var dimensions = (await js.InvokeAsync<string>("sizeImg", b64_helper)).Split("#");
        width = double.Parse(dimensions[0]);
        height = double.Parse(dimensions[1]);

        StateHasChanged();

        await using (var ctx = await helper_canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, double.MaxValue, double.MaxValue);
            if (blackwhite)
                await ctx.FilterAsync($"saturate({saturate}%) grayscale({grayscale}%) brightness({brightness}%) contrast({contrast}%)");
            await ctx.DrawImageAsync("img_helper", 0, 0, width, height);
            await ctx.FontAsync("16px Helvetica");
            await ctx.FillTextAsync(digimon.name, 0, height + 25);
        }

        StateHasChanged();

        await js.InvokeAsync<object>("saveAsFile", $"{digimon.name}.png");
    }

    private string SelectUrl(DigimonData digimon)
    {
        return digimon.img;
    }

}