@page "/pokemon"
@using MudBlazor
@using koloro.Core.Models
@using koloro.Core.RestClients
@using Excubo.Blazor.Canvas
@using System.Globalization;
@inject HttpClient Http
@inject IJSRuntime js
@inject ILanguageContainerService i18n

<Canvas id="helper_canvas" @ref="helper_canvas" width="@width" height="@(height+25)" hidden />
<img id="img_helper" src="@b64_helper" hidden />

<MudAppBar Class="menu_top">
    <MudForm @ref="form" @bind-IsValid="@success" @onkeypress="@(e => EnterKeySubmit(e))">
        <MudGrid>
            <MudItem xs="3">
                <MudTextField @bind-Value="nametofind" Label="@i18n.Keys["Name"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Mode" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="offset" Label="@i18n.Keys["Offset"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FirstPage" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudTextField @bind-Value="limit" Label="@i18n.Keys["Limit"]" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.ContentCopy" AdornmentColor="Color.Dark"></MudTextField>
            </MudItem>
            <MudItem xs="3">
                <MudSelect @bind-Value="enumValue"
                           Adornment="Adornment.Start" AdornmentColor="Color.Dark">
                    @foreach (StyleArt item in Enum.GetValues(typeof(StyleArt)))
                    {
                        <MudSelectItem Value="@item"><div class="miniFont">@item</div></MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudForm>
    <MudToggleIconButton Icon="far fa-star"ToggledIcon="fas fa-star" Color="Color.Dark" @bind-Toggled="@Shiny"></MudToggleIconButton>
    <MudToggleIconButton Icon="fas fa-mars-and-venus" ToggledIcon="fas fa-venus" Color="Color.Dark" @bind-Toggled="@Female"></MudToggleIconButton>
    <MudSpacer></MudSpacer>
    <MudIconButton Icon="fas fa-paper-plane" Color="Color.Inherit" OnClick="@(()=>SendForm())"></MudIconButton>

</MudAppBar>
<div class="grid">
    @if (!IsLoading)
    {
        <ul class="elements">

            @foreach (var pokemon in ListPokemonData)
            {
                var url = @SelectUrl(pokemon);
                if (!string.IsNullOrEmpty(url))
                {
                    <li>
                        <img class="pok" style="width:100%; height: 70%; max-width: 450px; object-fit: contain;" src=@url @onclick="() => { PlayAudio(pokemon).GetAwaiter(); }" />
                        <div class="container">

                            <div class="name">@CultureInfo.CurrentCulture.TextInfo.ToTitleCase(pokemon.Name)</div>
                            <div class="ico">
                                <i class="number">@pokemon.Id</i>
                                @foreach (var types in pokemon.Types)
                                {
                                    <img style="width:10%; padding: 0 0 0 1px;" src=@ImageByType(types.Type.name)>
                                }

                                <MudIconButton Color="Color.Secondary" Size="Size.Small" Icon="fa-solid fa-circle-info" Style="float: right;" @onclick="() => { PokemonInfoToNewTab(pokemon.Name).GetAwaiter() ;}"></MudIconButton>
                                <MudIconButton Color="Color.Secondary" Size="Size.Small" Icon="fa-solid fa-circle-down" Style="float: right;" @onclick="() => { DownloadImage(pokemon, false).GetAwaiter(); }"></MudIconButton>
                                <MudIconButton Color="Color.Secondary" Size="Size.Small" Icon=" fa-solid fa-circle-half-stroke" Style="float: right;" @onclick="() => { DownloadImage(pokemon, true).GetAwaiter(); }"></MudIconButton>
                                <br />
                                <i class="fa-solid fa-weight-hanging" style="float: right; padding: 5% 0 0 5%;">@pokemon.Weight</i>
                                <i class="fa-solid fa-arrows-up-down" style="float: right; padding: 5% 0 0 5%;">@pokemon.Height</i>

                            </div>

                        </div>
                    </li>
                }
            }

        </ul>
    }
    else
    {
        <MudProgressLinear Style="height: 20px; margin-top: -10px;" Color="Color.Success" Indeterminate="true" />
    }
</div>


@code{

    private bool Shiny = false;
    private bool Female = false;
    private bool IsLoading = true;
    private List<PokemonV2Pokemon> ListPokemonData;
    private PokemonResponse AllPokemonData;
    private Canvas helper_canvas;
    private int offset = 0;
    private int limit = 30;
    private double width = 0;
    private double height = 0;
    private string nametofind = string.Empty;
    private MudForm form;
    private bool success;
    private string b64_helper = string.Empty;

    public double saturate = 0;
    public double grayscale = 100;
    public double brightness = 200;
    public double contrast = 1000;

    public enum StyleArt
    {
        OfficialArtwork,
        DreamWorld,
        Default,
        HomeDefault,
        BackDefault,
        Animated,
        BlackWhite,
        Crystal,
        DiamondPearl,
        Emerald,
        FireredLeafgreen,
        GenerationI,
        GenerationII,
        GenerationIII,
        GenerationIV,
        GenerationV,
        GenerationVI,
        GenerationVII,
        GenerationVIII,
        Gold,
        HeartgoldSoulsilver,
        OmegarubyAlphasapphire,
        Platinum,
        RedBlue,
        RubySapphire,
        Silver,
        UltraSunUltraMoon,
        XY
    }

    private StyleArt enumValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        i18n.InitLocalizedComponent(this);
        await LoadPokemon();
        IsLoading = false;

    }

    private async Task EnterKeySubmit(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendForm();
        }
    }

    private async Task SendForm()
    {
        await LoadPokemon();
        IsLoading = false;
    }

    private async Task LoadPokemon()
    {

        if (AllPokemonData == null || !AllPokemonData.Pokemon.Any())
            AllPokemonData = await PokeApiRestClient.Pokemon();

        if (!string.IsNullOrEmpty(nametofind))
            ListPokemonData = AllPokemonData.Pokemon.Where(x => (x.Name.Contains(nametofind, StringComparison.InvariantCultureIgnoreCase) || x.Id.ToString().Contains(nametofind, StringComparison.InvariantCultureIgnoreCase))).Take(limit).ToList();
        else
            ListPokemonData = AllPokemonData.Pokemon.Skip(offset).Take(limit).ToList();

        IsLoading = true;

    }

    private async Task DownloadImage(PokemonV2Pokemon pokemon, bool blackwhite)
    {
        var url = SelectUrl(pokemon);
        b64_helper = await PokeApiRestClient.UrlToBase64(Http, url);
        var dimensions = (await js.InvokeAsync<string>("sizeImg", b64_helper)).Split("#");
        width = double.Parse(dimensions[0]);
        height = double.Parse(dimensions[1]);

        StateHasChanged();

        await using (var ctx = await helper_canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, double.MaxValue, double.MaxValue);
            if (blackwhite)
                await ctx.FilterAsync($"saturate({saturate}%) grayscale({grayscale}%) brightness({brightness}%) contrast({contrast}%)");
            else
                await ctx.FilterAsync("none");
            await ctx.DrawImageAsync("img_helper", 0, 0, width, height);
            await ctx.FontAsync("16px Helvetica");
            await ctx.FillTextAsync(pokemon.Id + " # " + CultureInfo.CurrentCulture.TextInfo.ToTitleCase(pokemon.Name), 0, height + 25);
        }

        StateHasChanged();

        await js.InvokeAsync<object>("saveAsFile", $"{pokemon.Id}_{pokemon.Name}.png");
    }

    private string SelectUrl(PokemonV2Pokemon pokemon)
    {
        var result = pokemon.Sprites.First().Sprites;

        var styleArtToFunc = new Dictionary<(StyleArt, bool, bool), Func<string>>
    {
        { (StyleArt.OfficialArtwork, true, false), () => result.Other.OfficialArtwork.FrontShiny },
        { (StyleArt.OfficialArtwork, false, false), () => result.Other.OfficialArtwork.FrontDefault },
        { (StyleArt.DreamWorld, false, true), () => result.Other.DreamWorld.FrontFemale },
        { (StyleArt.DreamWorld, false, false), () => result.Other.DreamWorld.FrontDefault },
        { (StyleArt.Default, true, false), () => result.FrontShiny },
        { (StyleArt.Default, false, true), () => result.FrontFemale },
        { (StyleArt.Default, false, false), () => result.FrontDefault },
        { (StyleArt.HomeDefault, true, false), () => result.Other.Home.FrontShiny },
        { (StyleArt.HomeDefault, false, true), () => result.Other.Home.FrontFemale },
        { (StyleArt.HomeDefault, false, false), () => result.Other.Home.FrontDefault },
        { (StyleArt.BackDefault, false, false), () => result.BackDefault },
        { (StyleArt.Animated, false, false), () => result.Versions.GenerationV.BlackWhite.Animated.FrontDefault },
        { (StyleArt.BlackWhite, false, false), () => result.Versions.GenerationV.BlackWhite.FrontDefault },
        { (StyleArt.Crystal, false, false), () => result.Versions.GenerationIi.Crystal.FrontDefault },
        { (StyleArt.DiamondPearl, false, false), () => result.Versions.GenerationIv.DiamondPearl.FrontDefault },
        { (StyleArt.Emerald, false, false), () => result.Versions.GenerationIii.Emerald.FrontDefault },
        { (StyleArt.FireredLeafgreen, false, false), () => result.Versions.GenerationIii.FireredLeafgreen.FrontDefault },
        { (StyleArt.GenerationI, false, false), () => result.Versions.GenerationI.RedBlue.FrontDefault },
        { (StyleArt.GenerationII, false, false), () => result.Versions.GenerationIi.Gold.FrontDefault },
        { (StyleArt.GenerationIII, false, false), () => result.Versions.GenerationIii.RubySapphire.FrontDefault },
        { (StyleArt.GenerationIV, false, false), () => result.Versions.GenerationIv.Platinum.FrontDefault },
        { (StyleArt.GenerationV, false, false), () => result.Versions.GenerationV.BlackWhite.FrontDefault },
        { (StyleArt.GenerationVI, false, false), () => result.Versions.GenerationVi.OmegarubyAlphasapphire.FrontDefault },
        { (StyleArt.GenerationVII, false, false), () => result.Versions.GenerationVii.UltraSunUltraMoon.FrontDefault },
        { (StyleArt.GenerationVIII, false, false), () => result.Versions.GenerationViii.Icons.FrontDefault },
        { (StyleArt.Gold, false, false), () => result.Versions.GenerationIi.Gold.FrontDefault },
        { (StyleArt.HeartgoldSoulsilver, false, false), () => result.Versions.GenerationIv.HeartgoldSoulsilver.FrontDefault },
        { (StyleArt.OmegarubyAlphasapphire, false, false), () => result.Versions.GenerationVi.OmegarubyAlphasapphire.FrontDefault },
        { (StyleArt.Platinum, false, false), () => result.Versions.GenerationIv.Platinum.FrontDefault },
        { (StyleArt.RedBlue, false, false), () => result.Versions.GenerationI.RedBlue.FrontDefault },
        { (StyleArt.RubySapphire, false, false), () => result.Versions.GenerationIii.RubySapphire.FrontDefault },
        { (StyleArt.Silver, false, false), () => result.Versions.GenerationIi.Silver.FrontDefault },
        { (StyleArt.UltraSunUltraMoon, false, false), () => result.Versions.GenerationVii.UltraSunUltraMoon.FrontDefault },
        { (StyleArt.XY, false, false), () => result.Versions.GenerationVi.XY.FrontDefault }
    };

        var key = (enumValue, Shiny, Female);
        return styleArtToFunc.ContainsKey(key) ? styleArtToFunc[key]() : result.Other.OfficialArtwork.FrontDefault;
    }

    private async Task PlayAudio(PokemonV2Pokemon pokemon)
    {
        var url = $"https://api.triplydb.com/datasets/academy/pokemon/assets/download?fileName={pokemon.Name}.ogg";
        await js.InvokeVoidAsync("playSound", url);
    }

    private string ImageByType(string type)
    {
        if (type.Equals("normal"))
            return "https://archives.bulbagarden.net/media/upload/thumb/9/95/Normal_icon_SwSh.png/64px-Normal_icon_SwSh.png";
        else if (type.Equals("fighting"))
            return "https://archives.bulbagarden.net/media/upload/thumb/3/3b/Fighting_icon_SwSh.png/64px-Fighting_icon_SwSh.png";
        else if (type.Equals("flying"))
            return "https://archives.bulbagarden.net/media/upload/thumb/b/b5/Flying_icon_SwSh.png/64px-Flying_icon_SwSh.png";
        else if (type.Equals("poison"))
            return "https://archives.bulbagarden.net/media/upload/thumb/8/8d/Poison_icon_SwSh.png/64px-Poison_icon_SwSh.png";
        else if (type.Equals("ground"))
            return "https://archives.bulbagarden.net/media/upload/thumb/2/27/Ground_icon_SwSh.png/64px-Ground_icon_SwSh.png";
        else if (type.Equals("rock"))
            return "https://archives.bulbagarden.net/media/upload/thumb/1/11/Rock_icon_SwSh.png/64px-Rock_icon_SwSh.png";
        else if (type.Equals("bug"))
            return "https://archives.bulbagarden.net/media/upload/thumb/9/9c/Bug_icon_SwSh.png/64px-Bug_icon_SwSh.png";
        else if (type.Equals("ghost"))
            return "https://archives.bulbagarden.net/media/upload/thumb/0/01/Ghost_icon_SwSh.png/64px-Ghost_icon_SwSh.png";
        else if (type.Equals("steel"))
            return "https://archives.bulbagarden.net/media/upload/thumb/0/09/Steel_icon_SwSh.png/64px-Steel_icon_SwSh.png";
        else if (type.Equals("fire"))
            return "https://archives.bulbagarden.net/media/upload/thumb/a/ab/Fire_icon_SwSh.png/64px-Fire_icon_SwSh.png";
        else if (type.Equals("water"))
            return "https://archives.bulbagarden.net/media/upload/thumb/8/80/Water_icon_SwSh.png/64px-Water_icon_SwSh.png";
        else if (type.Equals("grass"))
            return "https://archives.bulbagarden.net/media/upload/thumb/a/a8/Grass_icon_SwSh.png/64px-Grass_icon_SwSh.png";
        else if (type.Equals("electric"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/7b/Electric_icon_SwSh.png/64px-Electric_icon_SwSh.png";
        else if (type.Equals("psychic"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/73/Psychic_icon_SwSh.png/64px-Psychic_icon_SwSh.png"; 
        else if (type.Equals("ice"))
            return "https://archives.bulbagarden.net/media/upload/thumb/1/15/Ice_icon_SwSh.png/64px-Ice_icon_SwSh.png";
        else if (type.Equals("dragon"))
            return "https://archives.bulbagarden.net/media/upload/thumb/7/70/Dragon_icon_SwSh.png/64px-Dragon_icon_SwSh.png";
        else if (type.Equals("dark"))
            return "https://archives.bulbagarden.net/media/upload/thumb/d/d5/Dark_icon_SwSh.png/64px-Dark_icon_SwSh.png";
        else if (type.Equals("fairy"))
            return "https://archives.bulbagarden.net/media/upload/thumb/c/c6/Fairy_icon_SwSh.png/64px-Fairy_icon_SwSh.png";
        else
            return "";
    }

    public async Task PokemonInfoToNewTab(string pokemonName)
    {
        await js.InvokeAsync<object>("open", $"https://www.pokemon.com/es/pokedex/{pokemonName}", "_blank");
    }

}